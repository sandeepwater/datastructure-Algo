package array;

/**
 * @author Sandeep Srivastava 
 * Problem: Maximum Length Bitonic Subarray.
 *  Given an array A[0 … n-1] containing n positive integers, a subarray A[i … j]
 *  is bitonic if there is a k with i <= k <= j such that A[i] <= A[i +1] … = A[k + 1] >= .. A[j – 1] > = A[j].
 * 
 *  Ex-1 : {12, 4, 78, 90, 45, 23}
 *  inc[]={1, 1, 2, 3, 1, 1};
 *  inc[]={2, 1, 1, 3, 2, 1};
 *  
 *  3+3-1 = 5 max length bitonic array 4, 78, 90, 45, 23
 * 
 *  Ex-2 : {12, 4, 78, 90, 45, 66}
 *  inc[]={1, 1, 2, 3, 1, 2};
 *  inc[]={2, 1, 1, 2, 1, 1};
 *  
 *  3+2-1= 4 max length bitonic array 4, 78, 90, 45
 * 
 *  Expected Time Complexity: O(N)
 *  
 *  Time Complexity: O(N)
 *  Auxiliary Space: O(1)
 */
public class Ex22B {
	
	public static void main(String[] args) {
//		int[] arr = {11 ,12 , 10, 9, 8, 7};
//		int[] arr = {12, 4, 78, 90, 45, 23};
		int[] arr = {12, 4, 78, 90, 45, 66};
		System.out.println("Maximum Length Bitonic array is "+findMaxBitonicLength(arr, arr.length));	
	}

	private static int findMaxBitonicLength(int[] a, int n) {		
		if(n==0)
		  return 0;
		
		int maxLen = 1;
		
		int start  = 0; // storing the index of next of extreme local right minima of any previous
		                 // bitonic array, so that we this start could become responsible to calculate the length
                         //of previous bitonic array
		int nextStart = 0; //index of next of extreme local right minima of any bitonic
		
		int j = 0;
		
		while(j<n-1) {
			//look for wnd of ascent
			while(j<n-1 && a[j]<=a[j+1])
				j++;
			
			//look for end of descent
			while(j<n-1 && a[j]>a[j+1]) {
				
				if(j<n-1 && a[j]>a[j+1])
					nextStart = j+1; //index of next of extreme local right minima of any bitonic
				
			   j++; //just increment j = j+1;
			}
			
			//updating maxLen 
			maxLen = Math.max(maxLen, j-(start - 1));
			
			start = nextStart; // storing the index of next of extreme local right minima of any previous
								// bitonic array, so that we this start could become responsible to calculate the length
			                    //of previous bitonic array
		}	
		return maxLen;
	}
}
