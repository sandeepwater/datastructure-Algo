package array;

/**
 * 
 * @author Sandeep Srivastava
 * Problem: Find a peak element((Divide and Conquer)Iterative Binary search)
 * Definition: Peak element is an element which is not smaller than its neighbouring element.
 * Ex:(1) 3, 3, 3 Middle 3 element is Not smallar than its neighbour element. so it's a peak element.
 *    (2) {10, 20, 15, 2, 23, 90, 67} then 20 Or 90 is peak element.
 * Corner cases:---> {5, 10, 15, 20} for element 5 only one right element will be to compare i.e. right element,
 *                               for element 20 only one right element will be to compare i.e. left element
 *                               
 *              ---> If array is in ascending order then last element will be the Peak element, remaining will not be the peak element
 *              ---> If array is in decending order then first element will be the Peak element, remaining will not be the peak element
 *              ---> If all element of an array is same the all element is the peak element.
 *              
 *   Time Complexity: O(log N), Where n is the number of elements in the input array. In each step our search becomes half.
 *                    So it can be compared to Binary search, So the time complexity is O(log N)
 *   Auxiliary Space: O(1), No extra space is required, so the space complexity is constant.
 *              
 */
public class Ex10C {
	
	public static void main(String[] args) {
//		int[] intArr = new int[]{ 1, 3, 20, 4, 1, 0 };
   	    int[] intArr = new int[]{ 1, 3, 3, 4, 30, 0 };
//		int[] intArr = new int[]{ 1, 3, 4, 20, 1, 0 };
//		int[] intArr = new int[]{ 1, 3, 20, 4, 1, 0 };
		
		int peakElementIndex = -1; 
		peakElementIndex=findPeak(intArr,intArr.length);
		if(peakElementIndex !=-1 )
			System.out.println("Peak Element Index: "+peakElementIndex);
		else System.out.println("No Peak Element.");
	}

	private static int findPeak(int[] a, int n) {
		
		int low =0;
		int high = n-1;
		int mid = 0;
		
		while(low<=high) {
			// finding mid by binary right shifting.
            mid = (low + high) >> 1;
	
		    // first case if mid is the answer
			if((mid == 0 || a[mid-1]<=a[mid])&&(mid == n-1 || a[mid+1]<=a[mid]))
				break;
			
			// move the right pointer
			else if(mid>0 && a[mid-1]>a[mid])
			    high = mid-1;
			
			// move the left pointer
			else low = mid+1;
			 
		}
		return mid;
	}
}
