package array;

import java.util.Arrays;

/**
 * 
 * @author Sandeep Srivastava
 *  Title: Replace every element with the greatest element on right side( Tricky Method )
 *  
 *  Time Complexity = O(n) due to single traversal
 *  Auxiliary space = O(1)
 *
 */
public class Ex8B {
	
	public static void main(String[] args) {
		//int[] intArr = new int[]{16, 17, 4, 3, 5, 2};
		//int[] intArr = new int[]{16, 3, 5, 2, 1, 6};
		int[] intArr = new int[]{1, 7, 4, 3, 5, 2};
		System.out.println(Arrays.toString(intArr));
		
		int[] modifiedArr = functionToPerformRequiredWork(intArr, intArr.length);
		System.out.println(Arrays.toString(modifiedArr));

	}

	private static int[] functionToPerformRequiredWork(int[] a, int n) {
//		[[[[[[[[[1]]]]]]]]]
//		int max_element = Integer.MIN_VALUE;
//		if(a[n-1]>a[n-2])
//			max_element = a[n-1];
//		else {
//			max_element = a[n-2];
//		}
//		
//		int temp = a[n-1];
//		a[n-1] = -1;
//		a[n-2] = temp;
//		int temVar = Integer.MIN_VALUE;
//	
//		
//		for(int i = n-3 ; i>=0; i--) {
//			if(a[i]<max_element ) {
//				a[i] = max_element;
//			}else if (a[i]>max_element) {
//				temVar = a[i];
//				a[i]=max_element;
//				max_element = temVar;
//			}
//		}
//		
//		return a;
//	}
		
//		[[[[[[[[[2]]]]]]]]]
		int max_from_right = a[n - 1];
		a[n - 1] = -1;
		int temp = Integer.MIN_VALUE;

		for (int i = n - 2; i >= 0; i--) {
			temp = a[i];
			a[i] = max_from_right;

			if (max_from_right < temp) {
				max_from_right = temp;
			}
		}
		return a;
	}
}
