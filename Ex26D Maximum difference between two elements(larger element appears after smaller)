package array;

/**
 * @author Sandeep Srivastava
 * Problem: Maximum difference between two elements(larger element appears after smaller)
 *  
 *  Points: (1) Maximum difference between any two elements such that LARGER ELEMENT appears after SMALLER ELEMENTS. 
 * 
 *  Ex- Array: (1) {2, 3, 10, 6, 4, 8, 1} then returned value should be 8(Difference between 10 and 2)
 *             (2) {7, 9, 5, 6, 3, 2} then returned value should be 2(Difference between 9 and 7)
 *           
 *  Time Complexity: O(N)
 *  Auxiliary Space: O(1)
 */
public class Ex26D {

	public static void main(String[] args) {
		int arr[] = {2, 3, 10, 6, 4, 8, 1};
		int maxDiff=findMaxDiffByMaxSumSubArray(arr, arr.length);
		System.out.println("Max Diff: "+maxDiff);
	}

	private static int findMaxDiffByMaxSumSubArray(int[] a, int n) {
		
		//Initialize diff, current_num and max sum
		int diff = a[1] - a[0];
		int curr_sum = diff;
		int max_sum = curr_sum;
		
		for(int i=1; i<n-1 ; i++) {
			//Calculate current diff
			diff = a[i+1] -a[i];
			if(curr_sum>0) {
				curr_sum = curr_sum+diff;
			}else {
				curr_sum = diff;
			}
			
			//Update max sum, if needed
			if(curr_sum > max_sum)
				max_sum = curr_sum;
		}
		return max_sum;
	}
}
