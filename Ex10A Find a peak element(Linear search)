package array;

/**
 * 
 * @author Sandeep Srivastava
 * Problem: Find a peak element(Linear search)
 * Definition: Peak element is an element which is not smaller than its neighbouring element.
 * Ex:(1) 3, 3, 3 Middle 3 element is Not smallar than its neighbour element. so it's a peak element.
 *    (2) {10, 20, 15, 2, 23, 90, 67} then 20 Or 90 is peak element.
 * Corner cases:---> {5, 10, 15, 20} for element 5 only one right element will be to compare i.e. right element,
 *                               for element 20 only one right element will be to compare i.e. left element
 *                               
 *              ---> If array is in ascending order then last element will be the Peak element, remaining will not be the peak element
 *              ---> If array is in decending order then first element will be the Peak element, remaining will not be the peak element
 *              ---> If all element of an array is same the all element is the peak element.
 *              
 *  Time Complexity = O(n), One traversal is needed 
 *  Auxiliary space = O(1), No extra space is needed, so time complexity is O(1)
 */
public class Ex10A {
	
	public static void main(String[] args) {
		
		int[] intArr = {10, 20, 15, 2, 23, 90, 67};
		int peakElement = findPeakElement(intArr, intArr.length);
		if(peakElement!=-1)
		System.out.println("Peak Element: "+peakElement);
		else System.out.println("No peak element.");
	}

	//Function to find any one peak element
	private static int findPeakElement(int[] a, int n) {

	    // first or last element is peak element
		if(n==1)
			return a[0];
		if(a[0]>=a[1])
    		return a[0];
    	if(a[n-1]>=a[n-2])
    		return a[n-1];
		
    	// check for every other element
	    for(int i=1;i<n-1;i++) {

	        // check if the neighbors are smaller or equal
	    		if(a[i-1]<=a[i] && a[i]>=a[i+1])
		    		return a[i];
	    }
		return -1;
	}
}
