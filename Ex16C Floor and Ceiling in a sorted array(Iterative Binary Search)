package array;

/**
 * @author Sandeep Srivastava
 * Problem: Floor and Ceiling in a sorted array(Iterative Binary Search)
 * 
 * CEIL: is the smallest number, which is greater or equal to x(given element)
 * Floor: is the greatest number, which is smaller or equal to x(given number)
 * 
 * Assumption: Assume that the array is sorted in non-drecreasing order.
 * 
 * Time Complexity: O(logN)
 * Auxiliary Space: O(1)
 */
public class Ex16C {
	
	public static void main(String[] args) {
		int arr[] = { 1, 2, 8, 10, 10, 12, 19 };
//		int arr[] = {8};
		int x = 1;
		    
		int index = ceilSearch(arr, 0, arr.length - 1, x);
		if (index == -1)
			System.out.println("Ceiling of " + x + " doesn't exist in array");
		else
			System.out.println("ceiling of " + x + " is " + index);
	}

	private static int ceilSearch(int[] a, int low, int high, int x) {
		//If number if less the first number in array then the first 
		//number itseft will be the CEIL of that given number
		if(x <= a[0] )
			return 0;
		
		//high = arr.length - 1 = 0 it means the number of element in the array is 1
		if (high == 0) {
            return -1;
        }
		
		while (low<=high) {	
			int mid = (low+high)>>1;

			if(a[mid] == x)
				return mid;
			
			if(x<a[mid]) {
				if(low<=mid-1 && a[mid-1]<x )
					return mid;
				else
				high = mid - 1;
			}
			else {
				if(mid+1<=high && x <= a[mid+1])
					return mid+1;
				else
				low = mid +1;
			}		
		}
		return -1;
	}
}
