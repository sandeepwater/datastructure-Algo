package array;

/**
 * @author Sandeep Srivastava
 * 
 * A Simple Java Program to find the longest comman subarray of two binary arrays with same sum
 * 
 * Time Complexity -------> O(n^2)
 * Auxiliarry space ------> O(1)
 * 
 */
public class Ex1 {
	
	public static void main(String[] args) {
		
		 int arr1[] = {0, 1, 0, 1, 1, 1, 1};
		 int arr2[] = {1, 1, 1, 1, 1, 0, 1};
		
		 int result = findLongestSpan(arr1, arr2, arr1.length);
		 System.out.println("The Longest Span: "+result);
	}

	private static int findLongestSpan(int[] arr1, int[] arr2, int n) {
		
		int maxSpan = 0;

		for(int i = 0;i<n;i++)
		{
			int sum1 = 0 ;
			int sum2 = 0;
			
			for(int j=i;j<n;j++)
			{
				sum1 = sum1 + arr1[j];
				sum2 = sum2 + arr2[j];
				
				if(sum1 == sum2)
				{
					int len = j-i+1;
					if (maxSpan<len) {
						maxSpan = len;
					}
				}
			}
		}
		return maxSpan;
	}
}


########################################################################################################



package array;

/**
 * 
 * 
 * @author Sandeep Srivastava
 * 
 * A Simple Java Program to find the longest comman subarray of two binary arrays with same sum
 * 
 * Time Complexity -------> O(n)
 * Ausiliarry 
 */
public class Ex1a {
	public static void main(String[] args) {
		int arr1[] = {0, 1, 0, 1, 1, 1, 1}; 
		int arr2[] = {1, 1, 1, 1, 1, 0, 1};
		 int result = findLongestSpan(arr1, arr2, arr1.length);
		 System.out.println("The Longest Span: "+result);
	}

	private static int findLongestSpan(int[] arr1, int[] arr2, int n) {
		int maxSpan = 0;
		int preSum1 = 0;
		int preSum2 = 0;
		int diffArray[] = new int[2*n+1];
		
		for(int i=0; i<diffArray.length; i++)
		{
			diffArray[i] = -1;
		}
		
		for(int i=0 ; i<n; i++)
		{	
			preSum1 += arr1[i];
			preSum2 += arr2[i];
			
			int curr_diff = preSum1-preSum2;
			int diffIndex = n + curr_diff;
			
			if(curr_diff == 0)
				maxSpan = i+1;
			else if (diffArray[diffIndex] == -1) {
			   diffArray[diffIndex] = i;
			}else {
				int len  = i-diffArray[diffIndex];
				
				if(maxSpan<len)
					maxSpan = len;
			}
		}
		return maxSpan;
	}
}
