package array;

/**
 * 
 * @author Sandeep Srivastava
 * Problem: Find the Mejority Element.
 *    Mejority Element: Mejority Element in an array arr[] of size n is the element, which appears more 
 *    the n/2 times in an array.(And hence there is atmost one such elements)
 *
 *Time Complexity: O(n*n), A nested loop is needed where both the loops traverse the array from start to end.
 *Auxiliary Space: O(1), No extra space is required.
 */
public class Ex6AMejorityElements {
	
	//Driver Function 
	public static void main(String[] args) {
		int intArr[] = { 1, 1, 2, 1, 3, 5, 1 };
	
		int result = findMejorityElement(intArr, intArr.length);
		System.out.println("Mejority Element: "+result);
	}

	//Method which find the mejority element in the array
	private static int findMejorityElement(int[] a, int n) {
		
		int index =-1;
		int maxCount = 0;
		int count=0;
		
		for(int i=0;i<a.length;i++) {
			for(int j=i+1;j<a.length;j++) {
				if(a[i]==a[j]){
					count++;
				}
			}
			//update the maxCount 
			if(maxCount<count) {
				maxCount = count;
				index = i;
			}
		}
		
		//Check it whether the maximum times found element is greater than n/2 times of not
		if(maxCount>a.length/2)
			return a[index];
		else {
			return -1;
		}
	}
}
