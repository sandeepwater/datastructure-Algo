package array;

/**
 * @author Sandeep Srivastava 
 * Problem: Maximum Length Bitonic Subarray.
 *  Given an array A[0 … n-1] containing n positive integers, a subarray A[i … j]
 *  is bitonic if there is a k with i <= k <= j such that A[i] <= A[i +1] … = A[k + 1] >= .. A[j – 1] > = A[j].
 * 
 *  Ex-1 : {12, 4, 78, 90, 45, 23}
 *  inc[]={1, 1, 2, 3, 1, 1};
 *  inc[]={2, 1, 1, 3, 2, 1};
 *  
 *  3+3-1 = 5 max length bitonic array 4, 78, 90, 45, 23
 * 
 *  Ex-2 : {12, 4, 78, 90, 45, 66}
 *  inc[]={1, 1, 2, 3, 1, 2};
 *  inc[]={2, 1, 1, 2, 1, 1};
 *  
 *  3+2-1= 4 max length bitonic array 4, 78, 90, 45
 * 
 *  Expected Time Complexity: O(N)
 */
public class Ex22A {

	public static void main(String[] args) {
		int arr[] =  new int[] {12, 4, 78, 90, 45, 23};
		maxLengthBitonicArray(arr, arr.length);
	}

	private static void maxLengthBitonicArray(int[] a, int n) {
		//Declaring two arrays of same lenght, one for having increment record and other to have decrement record
		int[] inc = new int[n];
		int[] dec = new int[n];
		
		//initialize a var to increment when a[i+1]>a[i]
		int c = 1;
		inc[0] = 1;//Initile first element by default 1 
		for(int i=0;i<n-1;i++) {
			if(a[i+1]>a[i])
				inc[i+1] = ++c;
			else inc[i+1] = 1;
		}
		
		//initialize a var to increment when a[i-1]>a[i]
		int d = 1;
		dec[n-1] = 1;//Initile last element by default 1
		for(int i=n-1;i>0;i--) {
			if(a[i-1]>a[i])
				dec[i-1] = ++d;
			else dec[i-1] = 1;
		}
		
		//Declaring maxLen, so that we can have max length bitonic array.
		int maxLen = Integer.MIN_VALUE;
		int index = -1;// take an index so that we could have peak element index
		for(int i=0;i<n;i++) {
			if(inc[i]+dec[i]-1>maxLen) {
				maxLen = inc[i]+dec[i]-1;
			    index = i;
			}
		}
		
		System.out.println("Maximum Length Bitonic array is "+maxLen+ " and the peack will be at "+index+".");
	}
}
